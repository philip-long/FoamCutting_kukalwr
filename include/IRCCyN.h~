#include <visp/vpHomogeneousMatrix.h>

#ifndef __IRCCyN__
#define __IRCCyN__


void FRICartPose2vpHomogeneousMatrix(float* Pose,vpHomogeneousMatrix& M);
void FRIJaco2vpMatrix(float** fjaco,vpMatrix& M);
void Two3dimensionVector2OnedemensionVector( vpTranslationVector a, vpRzyxVector b, vpColVector& c);
void Two3dimensionVector2OnedemensionVector( vpTranslationVector a, vpRzyzVector b, vpColVector& c);
void Two3dimensionVector2OnedemensionVector( vpTranslationVector a, vpThetaUVector b, vpColVector& c);
void JacobianFrameChange(vpMatrix iJ, vpMatrix& sJ, vpRotationMatrix sRi);
void ComputeControlLaw(vpColVector& qdot, vpMatrix Jaco_base, vpMatrix L, double lamda, vpColVector deltaS);
void printfM(vpHomogeneousMatrix M,char* s);
void printfJ(vpMatrix J);
void GETHomogeneousMatrix(vpHomogeneousMatrix& M, char* filename);
void ComputeControlLawSecondTask(vpColVector& qdot, vpMatrix Jaco_base, vpMatrix L, double lamda, vpColVector deltaS, vpColVector z);
void JointLimitAvoid(float* q, vpColVector& z);
double VectorSrqt(vpColVector v, int num);
double findabsmax(vpColVector v,int n);
void Selectqdot(vpColVector& after, vpColVector cal,vpColVector before, double t);
void ComputeControlLaw(vpColVector& V, vpMatrix L, double lamda, vpColVector deltaS);
void GETParametersCI(char* filename, double* lamda, double& intertime);
void GETParametersJ(char* filename, double* lamda, double& intertime);
void SkewSym(vpColVector u, vpMatrix& L) ;
void ComputeLw(vpColVector thetau, vpMatrix& Lw) ;
double computesinc(double theta);

void LPositionFixCam(vpHomogeneousMatrix bmo, vpMatrix& c);
void LPoseFixCam(vpHomogeneousMatrix bmg,vpHomogeneousMatrix bmo, vpMatrix& c);
int EigenValueNum(vpMatrix J);
void ComputeControlLawCartesianImpedance(vpColVector& v, vpMatrix L, double lamda, vpColVector deltaS);
void Selectxdot(vpColVector& after, vpColVector cal, vpColVector before, double t);
vpHomogeneousMatrix Filter( vpHomogeneousMatrix cMoa,  vpHomogeneousMatrix cMob,  vpHomogeneousMatrix cMobb);
void JacobianMovePoint(vpMatrix Jg, vpMatrix& Jt, vpHomogeneousMatrix bMg, vpHomogeneousMatrix bMt);
void GETCuttingPoints(char* filename, int num, double**& data);
int GETFileLines(char* filename);
void ComputeCommandedForce(vpColVector measured, vpColVector desired, vpColVector& commanded) ;
void MeasuredForceFrameChange(vpColVector ip, vpColVector& sp, vpRotationMatrix sRi);
void VelMovePoint(vpColVector Vt, vpColVector& Vg, vpHomogeneousMatrix bMg, vpHomogeneousMatrix bMt);
void ForceFrameChange(vpColVector bF, vpColVector& gF, vpRotationMatrix bRg);

#endif
