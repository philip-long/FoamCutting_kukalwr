// ViSP includes
#include <visp/vpVideoWriter.h>
#include <visp/vpConfig.h>
#include <visp/vpImage.h>
#include <visp/vpPose.h>
#include <visp/vpMath.h>
#include <visp/vpImageConvert.h>
#include <visp/vpHomogeneousMatrix.h>
#include <visp/vpMbEdgeTracker.h>
#include <visp/vpTrackingException.h>
#include <visp/vpDisplayX.h>
#include <visp/vpDisplayGDI.h>
#include <visp/vpDisplayGTK.h>
#include <visp/vpDisplayD3D.h>
#include <visp/vp1394TwoGrabber.h>
#include <visp/vpImageTools.h>
#include <visp/vpMatrix.h>
#include <visp/vpMeterPixelConversion.h>
#include<visp/vpPixelMeterConversion.h>
#include<visp/vpDisplayOpenCV.h>

// OpenCv includes
#include "cv.h" 
#include "highgui.h" 
#include <stdio.h>  
#include "cvblobs/BlobResult.h"

//
#include <stdlib.h>
#include <math.h>
#include <iostream>
#include <highgui.h>
#include <fstream>
#define PI 3.14159265358979
/*
This file contins all the functions I have had to use independent of FRI.
Going forward this is where all functions should be defined so eventually the system can
run independently of the stanford FRI interface



*/


/*
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
double polygonArea(float *X, float *Y, int points) 
void printfMp(vpMatrix M, const char* s, int m, int n)

*/


/*
				FUNCTION: CHECK IF POINT IS IN POLYGON
//******************************************************************************************************************************************************
Arguments int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)

    nvert: Number of vertices in the polygon. Whether to repeat the first vertex at the end.
    vertx, verty: Arrays containing the x- and y-coordinates of the polygon's vertices.
    testx, testy: X- and y-coordinate of the test point.

It's both short and efficient and works both for convex and concave polygons. As suggested before, you should check the bounding rectangle first and treat polygon holes separately.

The idea behind this is pretty simple. It is based on the observation that a test point is within a polygon if when projected on the y-axis it's x value is below odd number of polygon edges. 

Copyright (c) 1970-2003, Wm. Randolph Franklin

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimers.
    Redistributions in binary form must reproduce the above copyright notice in the documentation and/or other materials provided with the distribution.
    The name of W. Randolph Franklin may not be used to endorse or promote products derived from this Software without specific prior written permission. 

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 

******************************************************************************************************************************************************
*/




int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy)
{
  int i, j, c = 0;
  for (i = 0, j = nvert-1; i < nvert; j = i++) {
    if ( ((verty[i]>testy) != (verty[j]>testy)) &&
     (testx < (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) )
       c = !c;
  }
  return c;
}


/*
				FUNCTION: CALUCLATE THE AREA OF A POLYGON
//******************************************************************************************************************************************************
Inputs: X and Y vertices given in a clockwise order, with points as the number of point
				
				
//  Public-domain function by Darel Rex Finley, 2006.

//*******************************************************************************************************************************************************
*/


double polygonArea(float *X, float *Y, int points) {

  double  area=0. ;
  int     i, j=points-1  ;

  for (i=0; i<points; i++) {
    area+=(X[j]+X[i])*(Y[j]-Y[i]); j=i; }

  return area*.5; }
  
   /*
				FUNCTION: Print a ViSP Matrix 
//******************************************************************************************************************************************************
Inputs: Matrix, its name (s) and the rows(m) and columns (n)
				
Outputs:
Function by QI GUO
//*******************************************************************************************************************************************************


*/

void printfMp(vpMatrix M, const char* s, int m, int n)
{
  printf("the vpMatrix matrix %s : \n", s);

  for(int i=0;i<m;i++)
  {
    for(int k=0;k<n;k++)
    {
	  printf("%8.3f ", M[i][k]);
    }

        printf("\n");
  }

} 
  
    /*
				FUNCTION: Print a ViSP vector 
//******************************************************************************************************************************************************
Inputs: Matrix, its name (s) and the rows(m) 
				
Outputs: 
Function by QI GUO
//*******************************************************************************************************************************************************


*/ 
  void printfVector(vpColVector v, const char* s, int m)
{
  printf("the vpMatrix matrix %s : \n [ ", s);

  for(int i=0;i<m;i++)

    {
	  printf("% 8.3f ", v[i]);
    }

    printf("]\n ");

} 
  
 /*
				FUNCTION: CALUCLATE THE DISTANCE BETWEEN 2D POINTS
//******************************************************************************************************************************************************
Inputs: x1, x2 ,y1,y2
				
Outputs: Distance between them
Function by Philip Long
//*******************************************************************************************************************************************************
*/ 
 double dist2D(double x1, double x2, double y1, double y2)
{
	double dx=(x2-x1);
	double dy=(y2-y1);
	double dist=sqrt(dx*dx+dy*dy);
    return dist;
}
  
  
/*
				FUNCTION: From the given blobs calculate the generic blobs using size and ellipical shape
//******************************************************************************************************************************************************
Inputs: blobs,filtering parameters
				
Outputs: Coorindates
Function by Philip Long
//*******************************************************************************************************************************************************


*/

void filteringblobs(CBlobResult& blobs,int MaxArea, int MinArea, int AspectRatio)
{

	float ARthreshold; // this is the aspect ratio threshold the float version of param4
	// The output and temporary images


	
	//printf("number of original blobs= %d \n", blobs.GetNumBlobs());
	// Exclude blobs greater than certain area
		blobs.Filter( blobs, B_EXCLUDE, CBlobGetArea(), B_GREATER, MaxArea );
		
	//printf("number of blobs less than area= %d \n", blobs.GetNumBlobs());
	// Exlcude blobs less than certain area
		blobs.Filter( blobs, B_EXCLUDE, CBlobGetArea(), B_LESS, MinArea  );
	//printf("number of blobs greater than= %d \n", blobs.GetNumBlobs());
	// Exclude blobs whose aspect ratio is greater than certain threshold
	// Eliminate all the blobs whose Aspect ratio (CBlobGetAxisRatio)is far from one
	// since AR=1 for circle when image plane is parallel to fork plane
	// we can reasonably assume that AR won't vary by massive amounnts
	// 1 is best 0 is worst, multiply by 100
	// =======================================================================// 
	ARthreshold=(float) AspectRatio;
		blobs.Filter( blobs, B_EXCLUDE,  CBlobGetAxisRatio(), B_LESS, ARthreshold/100 );
    printf("number of blobs of required aspect ratio= %d \n", blobs.GetNumBlobs()); 	
	// display filtered blobs
 }
 
 
 /*
				FUNCTION: From the given blobs calculate the guide line 
//******************************************************************************************************************************************************
Inputs: blobs,filtering parameters
				
Outputs: Coorindates
Function by Philip Long
//*******************************************************************************************************************************************************


*/

void filteringline(CBlobResult& blobs,int MaxArea, int MinArea, int length)
{
	CBlob BlobofInterest; // Blob used to find current information
	float ARthreshold; // this is the aspect ratio threshold the float version of param4
	// The output and temporary images
	for (int i = 0; i < blobs.GetNumBlobs(); i++ )
	{
	BlobofInterest=blobs.GetBlob(i);
	//printf("Area of blob of interest= %f \n",BlobofInterest.Area());
	}
	//printf("Before all exclusions %d \n",blobs.GetNumBlobs());
	//printf("number of original blobs= %d \n", blobs.GetNumBlobs());
	// Exclude blobs greater than certain area
		blobs.Filter( blobs, B_EXCLUDE, CBlobGetArea(), B_GREATER, MaxArea );
	//	printf("number after excluding maximum area area=%d \n",blobs.GetNumBlobs());
	//printf("number of blobs less than area= %d \n", blobs.GetNumBlobs());
	// Exlcude blobs less than certain area
		blobs.Filter( blobs, B_EXCLUDE, CBlobGetArea(), B_LESS, MinArea  );
	//	printf("number after exculding mimium area min area=%d \n",blobs.GetNumBlobs());
	//printf("number of blobs greater than= %d \n", blobs.GetNumBlobs());

	// ARthreshold=(float) AspectRatio;
	 //blobs.Filter( blobs, B_EXCLUDE,  CBlobGetAxisRatio(), B_LESS, ARthreshold/100 );
	 ARthreshold=(float) length;
	 blobs.Filter( blobs, B_EXCLUDE,  CBlobGetLength(), B_LESS, ARthreshold);
    	
	// display filtered blobs
 }
 
 
 
 /*
				FUNCTION: From the given blobs calculate the forks blobs using apriori knowledge
//******************************************************************************************************************************************************
Inputs: blobs
				
Outputs: New set of Blobs
Function by Philip Long
//*******************************************************************************************************************************************************


*/

void forksblobs(CBlobResult blobs,float* IndexofBlob)
{

	float Xij[2]; // The coorindates of the input blobs i  and j
    float Yij[2];
	double MinDiff;
	int f1,f2;
	CBlob Forkblob1,Forkblob2; // Blob used to find current information
	MinDiff=1000000; // Some very high number
	f1=-1;
	f2=-1;

	
	for (int i = 0; i < blobs.GetNumBlobs(); i++ )
	{
	 
	 Forkblob1=blobs.GetBlob(i);            
	 // Now find the blobs who correspond to fork
	 Xij[0]=Forkblob1.MinX() + (( Forkblob1.MaxX() - Forkblob1.MinX() ) / 2.0);
	 Yij[0]=Forkblob1.MinY() + (( Forkblob1.MaxY() - Forkblob1.MinY() ) / 2.0);
	
		for (int j=0;j<blobs.GetNumBlobs();j++)
		 {
			// If we have arrived here it means that a blob is nearly circular and within required area limits
			// therefore choose blobs who are closest to each other
			// in fact we should take the blobs who are closest to last known position
			
			
			Forkblob2=blobs.GetBlob(j); 
			if(i!=j)
			{
				 Xij[1]=Forkblob2.MinX() + (( Forkblob2.MaxX() - Forkblob2.MinX() ) / 2.0);
				 Yij[1]=Forkblob2.MinY() + (( Forkblob2.MaxY() - Forkblob2.MinY() ) / 2.0);
				 
				 
				 // Chosing blobs who are pretty similar in area and also quite close
				 if((dist2D(Xij[0],Xij[1],Yij[0],Yij[1]))<MinDiff)
				 {
					 MinDiff=dist2D(Xij[0],Xij[1],Yij[0],Yij[1]);
	
					 f1=i;
					 f2=j;
					 printf("Index of blobs on the fork=%d,%d \n",f1,f2);
				 }
			}
		 }
	}
     IndexofBlob[0]=f1;
	 IndexofBlob[1]=f2;

		
 }
 
 
  /*
				FUNCTION: From the given blobs calculate the best line using apriori knowledge
//******************************************************************************************************************************************************
Inputs: blobs, 
				
Outputs: IndexofBlob of LineBlob
Function by Philip Long
//*******************************************************************************************************************************************************

*/
 void Lineblob(CBlobResult blobs,float* IndexofBlob)
{

	double MaxDiff;
	int f1,f2;
	CBlob LineBlob1; // Blob used to find current information
	MaxDiff=0; // Some very high number
	f1=-1;
	f2=-1;

	CBlobGetMinYatMaxX minymaxx = CBlobGetMinYatMaxX();
	CBlobGetMinXatMinY minxminy = CBlobGetMinXatMinY();
	CBlobGetMaxYatMinX maxyminx = CBlobGetMaxYatMinX();
	CBlobGetMaxXatMaxY maxxmaxy = CBlobGetMaxXatMaxY(); 
	CBlobGetMinX minX = CBlobGetMinX();
	CBlobGetMaxX maxX = CBlobGetMaxX();
	CBlobGetMinY minY = CBlobGetMinY();
	CBlobGetMaxY maxY = CBlobGetMaxY();

	for (int i = 0; i < blobs.GetNumBlobs(); i++ )
	{
	 
	 LineBlob1=blobs.GetBlob(i);            
	 // Now find the blobs who correspond to fork
		float x1=maxxmaxy(LineBlob1);
		float x2=minxminy(LineBlob1);
		float y1=maxY(LineBlob1);
		float y2=minY(LineBlob1);
		 
		// The line should pan the screen therefore the distance between the corner should be the longest possible
		if((dist2D(x1,x2,y1,y2))>MaxDiff)
		{
		 MaxDiff=dist2D(x1,x2,y1,y2);
		 f1=i;
		 f2=10;
		 printf("Index of blobs on the fork=%d,%d \n",f1,f2);
		}
			
		 
	}
     IndexofBlob[0]=f1;
	 IndexofBlob[1]=f2;

		
 }
 
 
  /*
				FUNCTION: From the previous blobs try to track the using the previous positions
//******************************************************************************************************************************************************
Inputs: blobs, Old positions X and Y 
				
Outputs: New blobs whose centres are closest to previous blobs
Function by Philip Long
//*******************************************************************************************************************************************************


*/

void forksblobstrack(CBlobResult blobs,float* Xcentre,float* Ycentre,float* IndexofBlob)
{

	float Xij[2]; // The coorindates of the input blobs i  and j
    float Yij[2];
	double MinDiff;
	int f1,f2;
	CBlob Forkblob1,Forkblob2; // Blob used to find current information
	MinDiff=1000000; // Some very high number
	f1=-1;
	f2=-1;

	
	for (int i = 0; i < blobs.GetNumBlobs(); i++ )
	{
	 
	 Forkblob1=blobs.GetBlob(i);            
	 // Now find the blobs who correspond to fork
	 Xij[0]=Forkblob1.MinX() + (( Forkblob1.MaxX() - Forkblob1.MinX() ) / 2.0);
	 Yij[0]=Forkblob1.MinY() + (( Forkblob1.MaxY() - Forkblob1.MinY() ) / 2.0);
	
		for (int j=0;j<blobs.GetNumBlobs();j++)
		 {
			// If we have arrived here it means that a blob is nearly circular and within required area limits
			// therefore choose blobs who are closest to each other
			// in fact we should take the blobs who are closest to last known position
			
			
			Forkblob2=blobs.GetBlob(j); 

			if(i!=j)
			{
				 Xij[1]=Forkblob2.MinX() + (( Forkblob2.MaxX() - Forkblob2.MinX() ) / 2.0);
				 Yij[1]=Forkblob2.MinY() + (( Forkblob2.MaxY() - Forkblob2.MinY() ) / 2.0);
				 
				 
				 // Current forks P1 P2, Old forks P3, P4 
				 // take min of [(P1,P3)+(P2,P4)] and [(P1,P4)+(P2,P3)] 
				
				 // Chosing blobs who are closest to last blobs
				 if( fmin( (dist2D(Xij[0],Xcentre[0],Yij[0],Ycentre[0])+  dist2D(Xij[1],Xcentre[1],Yij[1],Ycentre[1])),(dist2D(Xij[0],Xcentre[1],Yij[0],Ycentre[1])+  dist2D(Xij[1],Xcentre[0],Yij[1],Ycentre[0])))<MinDiff)
				 {
					 MinDiff= fmin( (dist2D(Xij[0],Xcentre[0],Yij[0],Ycentre[0])+  dist2D(Xij[1],Xcentre[1],Yij[1],Ycentre[1])),(dist2D(Xij[0],Xcentre[1],Yij[0],Ycentre[1])+  dist2D(Xij[1],Xcentre[0],Yij[1],Ycentre[0])));
	
					 f1=i;
					 f2=j;
					 printf("Index of blobs on the fork=%d,%d \n",f1,f2);
				 }
			}
		 }
	}
     IndexofBlob[0]=f1;
	 IndexofBlob[1]=f2;

		
 }
 
  /*
				FUNCTION: From the previous blobs try to track the using the previous positions
//******************************************************************************************************************************************************
Inputs: blobs, Old positions X and Y 
				
Outputs: New Line whose centres are closest to previous blobs
Function by Philip Long
//*******************************************************************************************************************************************************


*/

void Linetrack(CBlobResult blobs,float* Xcentre,float* Ycentre,float* IndexofBlob)
{

float Xij[2]; // The coorindates of the input blobs i  and j
float Yij[2];
double MinDiff;
int f1,f2;
CBlob LineBlob1; // Blob used to find current information
MinDiff=1000000; // Some very high number
f1=-1;
f2=-1;

CBlobGetMinYatMaxX minymaxx = CBlobGetMinYatMaxX();
CBlobGetMinXatMinY minxminy = CBlobGetMinXatMinY();
CBlobGetMaxYatMinX maxyminx = CBlobGetMaxYatMinX();
CBlobGetMaxXatMaxY maxxmaxy = CBlobGetMaxXatMaxY(); 
CBlobGetMinX minX = CBlobGetMinX();
CBlobGetMaxX maxX = CBlobGetMaxX();
CBlobGetMinY minY = CBlobGetMinY();
CBlobGetMaxY maxY = CBlobGetMaxY();

for (int i = 0; i < blobs.GetNumBlobs(); i++ )
	{

	// Now find the blobs who correspond to fork
	LineBlob1=blobs.GetBlob(i);            
	// Now find the blobs who correspond to fork
	float x1=maxxmaxy(LineBlob1);
	float x2=minxminy(LineBlob1);
	float y1=maxY(LineBlob1);
	float y2=minY(LineBlob1);


	// Current forks P1 P2, Old forks P3, P4 
	// take min of [(P1,P3)+(P2,P4)] and [(P1,P4)+(P2,P3)] 

	// Chosing blobs who are closest to last blobs
	if( fmin( (dist2D(x1,Xcentre[0],y1,Ycentre[0])+  dist2D(x2,Xcentre[1],y2,Ycentre[1])),(dist2D(x1,Xcentre[1],y1,Ycentre[1])+  dist2D(x2,Xcentre[0],y2,Ycentre[0])))<MinDiff)
		{
		MinDiff= fmin( (dist2D(x1,Xcentre[0],y1,Ycentre[0])+  dist2D(x2,Xcentre[1],y2,Ycentre[1])),(dist2D(x1,Xcentre[1],y1,Ycentre[1])+  dist2D(x2,Xcentre[0],y2,Ycentre[0])));

		f1=i;
		f2=10;
		printf("Index of blobs on the fork=%d,%d \n",f1,f2);
		}

	}
	
IndexofBlob[0]=f1;
IndexofBlob[1]=f2;


}
  /*
				FUNCTION: Compute Interaction matrix for segment
//******************************************************************************************************************************************************
Inputs: The image position of the blobs: Xcentre={u1,u2} and Ycentre={v1,v2} and the depth DepthZ. Camera parameters (fu,fv,fs,u0,v0)

The camera parameters are from collineation matrix of pinhole camera such that:

_______________________________________

[u]    [ fu,fs,u0]   [Xcentre/DepthZ] 
[v]  = [ 0 ,fv,v0] * [Ycentre/DepthZ] 
[1]    [ 0, 0 ,1]		[1]	          
_______________________________________


Outputs: Interaction matrix relating image segment velocity to camera Cartesian velocity Lseg

Function by Philip Long
//*******************************************************************************************************************************************************

*/


void InteractionMatSegment(vpMatrix& Lseg,float* Xcentre,float* Ycentre,float* DepthZ,float* CameraParameters)
{
float uc,vc,l,theta,fu,fv,fs,u0,v0,Z1,Z2; // Parameters to describe dots as segment


fu=CameraParameters[0];
fv=CameraParameters[1];
fs=CameraParameters[2];
u0=CameraParameters[3];
v0=CameraParameters[4];

Z1=DepthZ[0];
Z2=DepthZ[1];


uc=(Xcentre[0]+Xcentre[1])/2;
vc=(Ycentre[0]+Ycentre[1])/2;
l=pow( (pow((Xcentre[0]-Xcentre[1]),2) + pow((Ycentre[0]-Ycentre[1]),2) ), 0.5);
theta=atan((Ycentre[0]-Ycentre[1])/(Xcentre[0]-Xcentre[1]));    

// Debug tools 
		 printf(" xp = %f \n",uc);
		 printf(" yp = %f \n",vc);
		 printf(" Lp = %f \n",l);
		 printf(" theta = %f \n",theta);

Lseg[0][0]=- fu/(2*Z1) - fu/(2*Z2);
Lseg[0][1]=- fs/(2*Z1) - fs/(2*Z2);
Lseg[0][2]=(uc - u0 + (l*cos(theta))/2)/(2*Z1) - (u0 - uc + (l*cos(theta))/2)/(2*Z2);
Lseg[0][3]=fs + (u0*v0 - u0*vc - uc*v0 + uc*vc + (pow(l,2)*sin(2*theta))/8)/fv;
Lseg[0][4]=(fs*u0*v0 - fs*u0*vc - fs*uc*v0 + fs*uc*vc + (fs*pow(l,2)*sin(2*theta))/8)/(fu*fv) - ((pow(l,2)*pow(cos(theta),2))/4 - 2*u0*uc + pow(fu,2) + pow(u0,2) + pow(uc,2))/fu;
Lseg[0][5]=(fs*(u0 - uc))/fu - ((v0 - vc)*(pow(fs,2) + pow(fu,2)))/(fu*fv);
Lseg[1][0]=0;
Lseg[1][1]=- fv/(2*Z1) - fv/(2*Z2);
Lseg[1][2]=(vc - v0 + (l*sin(theta))/2)/(2*Z1) - (v0 - vc + (l*sin(theta))/2)/(2*Z2);
Lseg[1][3]=fv + ((pow(l,2)*pow(sin(theta),2))/4 - 2*v0*vc + pow(v0,2) + pow(vc,2))/fv;
Lseg[1][4]=(fs*pow(v0,2) + fs*pow(vc,2) - 2*fs*v0*vc + (fs*pow(l,2)*pow(sin(theta),2))/4)/(fu*fv) - (u0*v0 - u0*vc - uc*v0 + uc*vc + (pow(l,2)*sin(2*theta))/8)/fu;
Lseg[1][5]=(fv*u0 - fv*uc - fs*v0 + fs*vc)/fu;
Lseg[2][0]=(fu*l*cos(theta)*(Z1 - Z2))/(Z1*Z2*l);
Lseg[2][1]=(l*(Z1 - Z2)*(fs*cos(theta) + fv*sin(theta)))/(Z1*Z2*l);
Lseg[2][2]=(l*(l - 2*u0*cos(theta) + 2*uc*cos(theta) - 2*v0*sin(theta) + 2*vc*sin(theta)))/(2*Z1*l) + (l*(Z1*l + 2*Z1*u0*cos(theta) - 2*Z1*uc*cos(theta) + 2*Z1*v0*sin(theta) - 2*Z1*vc*sin(theta)))/(2*Z1*Z2*l);
Lseg[2][3]=-(2*v0*l - 2*vc*l + u0*sin(2*theta)*l - uc*sin(2*theta)*l + 2*v0*pow(sin(theta),2)*l - 2*vc*pow(sin(theta),2)*l)/(2*fv);
Lseg[2][4]=(l*(3*u0 - 3*uc + u0*cos(2*theta) - uc*cos(2*theta) + v0*sin(2*theta) - vc*sin(2*theta)))/(2*fu) - (l*(3*fs*v0 - 3*fs*vc - fs*v0*cos(2*theta) + fs*vc*cos(2*theta) + fs*u0*sin(2*theta) - fs*uc*sin(2*theta)))/(2*fu*fv);
Lseg[2][5]=(l*(pow(fs,2)*sin(2*theta) + pow(fu,2)*sin(2*theta) - pow(fv,2)*sin(2*theta) - 2*fs*fv*cos(2*theta)))/(2*fu*fv);
Lseg[3][0]=-(fu*sin(theta)*(Z1 - Z2))/(Z1*Z2*l);
Lseg[3][1]=((Z1 - Z2)*(fv*cos(theta) - fs*sin(theta)))/(Z1*Z2*l);
Lseg[3][2]=((Z1 - Z2)*(v0*cos(theta) - vc*cos(theta) - u0*sin(theta) + uc*sin(theta)))/(Z1*Z2*l);
Lseg[3][3]=(u0*pow(sin(theta),2) - uc*pow(sin(theta),2) - (v0*sin(2*theta))/2 + (vc*sin(2*theta))/2)/fv;
Lseg[3][4]=(v0 - vc - (u0*sin(2*theta))/2 + (uc*sin(2*theta))/2 - v0*pow(sin(theta),2) + vc*pow(sin(theta),2))/fu + (fs*u0*pow(sin(theta),2) - fs*uc*pow(sin(theta),2) - (fs*v0*sin(2*theta))/2 + (fs*vc*sin(2*theta))/2)/(fu*fv);
Lseg[3][5]=(fv*(pow(sin(theta),2) - 1))/fu - (pow(fs,2)*pow(sin(theta),2) + pow(fu,2)*pow(sin(theta),2))/(fu*fv) + (fs*sin(2*theta))/fu;

}


  /*
				FUNCTION: Compute Interaction matrix for points
//******************************************************************************************************************************************************
Inputs: The image position of the blobs: Xcentre={u1,u2} and Ycentre={v1,v2} and the depth DepthZ. Camera parameters (fu,fv,fs,u0,v0)

The camera parameters are from collineation matrix of pinhole camera such that:

_______________________________________

[u]    [ fu,fs,u0]   [Xcentre/DepthZ] 
[v]  = [ 0 ,fv,v0] * [Ycentre/DepthZ] 
[1]    [ 0, 0 ,1]		[1]	          
_______________________________________


Outputs: Interaction matrix relating image segment velocity to camera Cartesian velocity Lseg

Function by Philip Long
//*******************************************************************************************************************************************************

*/

void InteractionMatTwoPoints(vpMatrix& Lpts,float* Xcentre,float* Ycentre,float* DepthZ,float* CameraParameters)
{
float u0,u1,u2,v0,v1,v2,fu,fv,fs,Z1,Z2; // Parameters to describe dots as image points
u1=Xcentre[0];
u2=Xcentre[1];
v1=Ycentre[0];
v2=Ycentre[1];

fu=CameraParameters[0];
fv=CameraParameters[1];
fs=CameraParameters[2];
u0=CameraParameters[3];
v0=CameraParameters[4];

Z1=DepthZ[0];
Z2=DepthZ[1];



Lpts[0][0]=-fu/Z1;
Lpts[0][1]=-fs/Z1;
Lpts[0][2]=-(u0 - u1)/Z1;
Lpts[0][3]=fs + ((u0 - u1)*(v0 - v1))/fv;
Lpts[0][4]=- fu - ((u0 - u1)*(fv*u0 - fv*u1 - fs*v0 + fs*v1))/(fu*fv);
Lpts[0][5]=(fs*(u0 - u1))/fu - ((v0 - v1)*(pow(fs,2) + pow(fu,2)))/(fu*fv);
Lpts[1][0]=0;
Lpts[1][1]=-fv/Z1;
Lpts[1][2]=-(v0 - v1)/Z1;
Lpts[1][3]=fv + pow((v0 - v1),2)/fv;
Lpts[1][4]=(fs*pow((v0 - v1),2))/(fu*fv) - ((u0 - u1)*(v0 - v1))/fu;
Lpts[1][5]=(fv*(u0 - u1))/fu - (fs*(v0 - v1))/fu;
Lpts[2][0]=-fu/Z2;
Lpts[2][1]=-fs/Z2;
Lpts[2][2]=-(u0 - u2)/Z2;
Lpts[2][3]=fs + ((u0 - u2)*(v0 - v2))/fv;
Lpts[2][4]=- fu - ((u0 - u2)*(fv*u0 - fv*u2 - fs*v0 + fs*v2))/(fu*fv);
Lpts[2][5]=(fs*(u0 - u2))/fu - ((v0 - v2)*(pow(fs,2) + pow(fu,2)))/(fu*fv);
Lpts[3][0]=0;
Lpts[3][1]=-fv/Z2;
Lpts[3][2]=-(v0 - v2)/Z2;
Lpts[3][3]=fv + pow((v0 - v2),2)/fv;
Lpts[3][4]=(fs*pow((v0 - v2),2))/(fu*fv) - ((u0 - u2)*(v0 - v2))/fu;
Lpts[3][5]=(fv*(u0 - u2))/fu - (fs*(v0 - v2))/fu;

}


 /*
				FUNCTION: Define DefineFeatureSegment
//******************************************************************************************************************************************************
Inputs: Current dot positions, Xcentre and Ycentre and desired image features s* (vpColVector)
				
Outputs: deltas which is the difference between the current image and the desired image featue

Function by Philip Long
//*******************************************************************************************************************************************************


*/

 void DefineDeltaS(float* Xcentre,float* Ycentre,vpColVector sdesired,vpColVector& deltas)
 {
	float uc,vc,l,theta,AngleDiff,AngleDiff2,theta2;
	// Assign Segment Variables
	uc=(Xcentre[0]+Xcentre[1])/2;
	vc=(Ycentre[0]+Ycentre[1])/2;
	l=pow((Xcentre[0]-Xcentre[1]),2) + pow((pow((Ycentre[0]-Ycentre[1]),2)),0.5);
	theta=atan((Ycentre[0]-Ycentre[1])/(Xcentre[0]-Xcentre[1]));
	printf("theta %f \n",theta);
	theta2=theta+PI; // if blob1 change position with blob two 
	printf("theta2 %f \n",theta2);

	deltas[0]=sdesired[0]-uc;
	deltas[1]=sdesired[1]-vc;
	deltas[2]=sdesired[2]-l;
	AngleDiff=atan2(sin(theta-sdesired[3]), cos(theta-sdesired[3]));
	printf("AngleDiff %f \n",AngleDiff);
	AngleDiff2=atan2(sin(theta2-sdesired[3]), cos(theta2-sdesired[3]));
	printf("AngleDiff2 %f \n",AngleDiff2);
	/*
	AngleDiff = sdesired[3] - theta;
	AngleDiff += (AngleDiff>PI) ? -(2*PI) : (AngleDiff<-PI) ? (2*PI) : 0;
	
	AngleDiff2 = sdesired[3] - theta2;
	AngleDiff2 += (AngleDiff2>PI) ? -(2*PI) : (AngleDiff2<-PI) ? (2*PI) : 0;
	*/
	
	if (abs(AngleDiff)<abs(AngleDiff2))
	{
		deltas[3]=AngleDiff;
	}
	else
	{
		deltas[3]=AngleDiff2;
	}
	printf("deltas %f \n",deltas[3]);
 
 }
 
  /*
				FUNCTION: Define DefineFeatureSegment
//******************************************************************************************************************************************************
Inputs: Current dot positions, Xcentre and Ycentre and desired image features s* (vpColVector)
				
Outputs: deltas which is the difference between the current image and the desired image featue

Function by Philip Long
//*******************************************************************************************************************************************************


*/
 

